name: Build and Deploy to VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-server:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image tag
        id: set_tag
        run: echo "image_tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile.prod
          push: true
          platforms: linux/arm64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/receipt-extractor-server:${{ steps.set_tag.outputs.image_tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/receipt-extractor-server:latest
          cache-from: |
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/receipt-extractor-server:buildcache
          cache-to: |
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/receipt-extractor-server:buildcache,mode=max

  build-client:
    runs-on: ubuntu-latest
    needs: build-server
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create client .env file
        run: echo "${{ secrets.CLIENT_ENV }}" > client/.env.production

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile.prod
          push: true
          platforms: linux/arm64
          build-args: |
            CLIENT_ENV_FILE=.env.production
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/receipt-extractor-client:${{ needs.build-server.outputs.image_tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/receipt-extractor-client:latest
          cache-from: |
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/receipt-extractor-client:buildcache
          cache-to: |
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/receipt-extractor-client:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [build-server, build-client]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Sync Docker configuration files
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p ~/receipt-extractor/client ~/receipt-extractor/server"
          scp -o StrictHostKeyChecking=no docker-compose.prod.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/receipt-extractor/
          scp -o StrictHostKeyChecking=no client/Dockerfile.prod ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/receipt-extractor/client/
          scp -o StrictHostKeyChecking=no server/Dockerfile.prod ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/receipt-extractor/server/
      - name: Deploy on VPS
        run: |
          IMAGE_TAG=${GITHUB_SHA}
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "\
            docker login -u '${{ secrets.DOCKERHUB_USERNAME }}' -p '${{ secrets.DOCKERHUB_TOKEN }}' && \
            cd ~/receipt-extractor && \
            echo '${{ secrets.SERVER_ENV }}' > server/.env.production && \
            echo '${{ secrets.CLIENT_ENV }}' > client/.env.production && \
            export DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} && \
            IMAGE_TAG=${IMAGE_TAG} docker compose -f docker-compose.prod.yml down && \
            docker compose -f docker-compose.prod.yml pull --quiet && \
            docker images '${{ secrets.DOCKERHUB_USERNAME }}/receipt-extractor-server' --format '{{.Repository}}:{{.Tag}}' | tail -n +4 | xargs -r docker rmi || true && \
            docker images '${{ secrets.DOCKERHUB_USERNAME }}/receipt-extractor-client' --format '{{.Repository}}:{{.Tag}}' | tail -n +4 | xargs -r docker rmi || true && \
            docker system prune -f && \
            IMAGE_TAG=${IMAGE_TAG} DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} docker compose -f docker-compose.prod.yml up -d --force-recreate"
